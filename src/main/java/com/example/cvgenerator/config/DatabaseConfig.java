package com.example.cvgenerator.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import javax.sql.DataSource;
import java.net.URI;

@Configuration
public class DatabaseConfig {

    @Value("${DATABASE_URL:postgresql://postgres:dimpsonteam2256@localhost:5432/cv}")
    private String databaseUrl;

    @Bean
    @Primary
    public DataSource dataSource() {
        System.out.println("üîß Raw DATABASE_URL: " + databaseUrl);

        try {
            // –ü–∞—Ä—Å–∏–º–æ URL –≤—Ä—É—á–Ω—É
            String cleanUrl = databaseUrl;
            if (cleanUrl.startsWith("postgres://")) {
                cleanUrl = cleanUrl.replace("postgres://", "postgresql://");
            }

            System.out.println("üîß Clean URL: " + cleanUrl);

            URI uri = new URI(cleanUrl);

            String host = uri.getHost();
            int port = uri.getPort();
            String database = uri.getPath().substring(1);
            String[] userInfo = uri.getUserInfo().split(":");
            String username = userInfo[0];
            String password = userInfo.length > 1 ? userInfo[1] : "";

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ SSL —Ä–µ–∂–∏–º –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            String sslMode = "disable"; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏

            // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–¥–∞–∫—à–Ω (Supabase –∞–±–æ —ñ–Ω—à–∏–π —Ö–º–∞—Ä–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
            if (!host.equals("localhost") && !host.equals("127.0.0.1")) {
                sslMode = "require";
            }

            // –§–æ—Ä–º—É—î–º–æ JDBC URL –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º SSL —Ä–µ–∂–∏–º–æ–º
            String jdbcUrl = String.format("jdbc:postgresql://%s:%d/%s?sslmode=%s&prepareThreshold=0&cachePrepStmts=false&tcpKeepAlive=true",
                    host, port, database, sslMode);

            System.out.println("üîó Host: " + host);
            System.out.println("üîó Port: " + port);
            System.out.println("üîó Database: " + database);
            System.out.println("üë§ Username: " + username);
            System.out.println("üîí Password length: " + password.length());
            System.out.println("üîó SSL Mode: " + sslMode);
            System.out.println("üîó JDBC URL: " + jdbcUrl);

            // –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HikariCP –¥–ª—è Supabase Free tier
            HikariConfig config = new HikariConfig();
            config.setJdbcUrl(jdbcUrl);
            config.setUsername(username);
            config.setPassword(password);
            config.setDriverClassName("org.postgresql.Driver");

            // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Supabase Free tier (–ª—ñ–º—ñ—Ç: ~15 –ø—ñ–¥–∫–ª—é—á–µ–Ω—å)
            config.setMaximumPoolSize(1);  // –ö–†–ò–¢–ò–ß–ù–û: —Ç—ñ–ª—å–∫–∏ 1 –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            config.setMinimumIdle(0);      // –ë–µ–∑ idle –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
            config.setConnectionTimeout(30000);  // 30 —Å–µ–∫—É–Ω–¥
            config.setIdleTimeout(300000);       // 5 —Ö–≤–∏–ª–∏–Ω
            config.setMaxLifetime(600000);       // 10 —Ö–≤–∏–ª–∏–Ω
            config.setLeakDetectionThreshold(60000); // 1 —Ö–≤–∏–ª–∏–Ω–∞
            config.setInitializationFailTimeout(1);

            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            config.addDataSourceProperty("tcpKeepAlive", "true");
            config.addDataSourceProperty("socketTimeout", "30");
            config.addDataSourceProperty("loginTimeout", "10");
            config.addDataSourceProperty("cancelSignalTimeout", "10");

            HikariDataSource ds = new HikariDataSource(config);

            System.out.println("‚úÖ HikariDataSource —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏");
            System.out.println("üìä Max Pool Size: " + config.getMaximumPoolSize());
            System.out.println("üìä Min Idle: " + config.getMinimumIdle());

            return ds;

        } catch (Exception e) {
            System.err.println("‚ùå Error parsing DATABASE_URL: " + e.getMessage());
            e.printStackTrace();

            // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ –ë–ï–ó SSL
            HikariConfig fallbackConfig = new HikariConfig();
            fallbackConfig.setJdbcUrl("jdbc:postgresql://localhost:5432/cv?sslmode=disable&prepareThreshold=0");
            fallbackConfig.setUsername("postgres");
            fallbackConfig.setPassword("dimpsonteam2256");
            fallbackConfig.setDriverClassName("org.postgresql.Driver");
            fallbackConfig.setMaximumPoolSize(2);
            fallbackConfig.setMinimumIdle(1);

            return new HikariDataSource(fallbackConfig);
        }
    }
}